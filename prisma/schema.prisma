// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  clerkUserId String    @unique
  email       String    @unique
  name        String?
  imageUrl    String?
  industry    String?
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Profile Fields
  bio         String?
  experience  Int?
  skills      String[]  

  assessments Assessment[]
  resume Resume?
  coverLetters CoverLetter[]
  
}

model Assessment {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  quizScore       Float
  questions     Json[]
  category        String
  improvementTip    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Resume {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  content     String
  //atsScore   Float?
  //feedback   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
 
model CoverLetter {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  jobDescription String?
  companyName     String
  jobTitle    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}


model IndustryInsight{
  id          String   @id @default(uuid())
  industry    String   @unique
  users    User[]
  salaryRange Json[]

  //Industry Trends
  growthRate Float?
  demandLevel DemandLevel
  topSkills  String[]

  //Market Conditions
  marketOutlook MarketOutlook
  keyTrends  String[]

  //Learning Suggestions
  recommendedSkills String[]

  lastUpdated   DateTime @default(now())
  nextUpdate    DateTime @updatedAt
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}